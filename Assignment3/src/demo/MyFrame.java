/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo;

import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.table.DefaultTableModel;

/**
 * show table,
 * @author send2ocean
 */
public class MyFrame extends javax.swing.JFrame {

    public SimulationData data;
    public CanvasFrame j1;
    public Vector colunms = new Vector();
    public Vector dataRows = new Vector();
    DefaultTableModel model ;
    /**
     * Creates new form NewJFrame
     */
    public MyFrame(SimulationData data) {
        this.data = data;
        initComponents();
        initTable();
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(102, 102, 255));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ambulance Simulation");

        jButton1.setForeground(new java.awt.Color(0, 0, 173));
        jButton1.setText("Start");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setForeground(new java.awt.Color(0, 0, 173));
        jButton2.setText("Stop");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTable1);

        jLabel2.setText("Duration (seconds):");

        jTextField1.setText("60");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        jButton1.setEnabled(false);
        String duration = jTextField1.getText();
        Application.duration = Integer.valueOf(duration);
        
        j1 = new CanvasFrame();

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CanvasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CanvasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CanvasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CanvasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            j1.setVisible(true);
        });
        j1.getXPanel().setPoints(data.getPointList());
        Worker worker = new Worker();

        new Thread(worker).start();
        
        for(Ambulance amb:data.getAmbulances()){
            AmbulanceCount countThread = new AmbulanceCount(amb,this);
            new Thread(countThread).start();
        }
        

    }//GEN-LAST:event_jButton1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        //save data from simulationData obj
        SimulatioinUtil.saveCSV(data);
        //exit 
        System.exit(0);
    }//GEN-LAST:event_jButton2MouseClicked
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
public void initTable() {

        colunms.addElement("ID");
        colunms.addElement("Location");
        colunms.addElement("Status");
        colunms.addElement("Patient");
       
        model = new DefaultTableModel(dataRows, colunms);
        jTable1.setModel(model);
    }
 
public void refreshTable(){
     dataRows.removeAllElements();
      
     for (Ambulance a : data.getAmbulances()) {
            Vector row = new Vector();
            row.addElement(a.getId());
            row.addElement("(" + a.getLocalPoint().getX() + "," + a.getLocalPoint().getY() + ")");
            row.addElement(a.getStatus());
            row.addElement(a.getPatient() == null ? "" : a.getPatient().getId());
            //model.addRow(row);
            dataRows.addElement(row);
        }
    //jTable1.validate();
    //jTable1.updateUI();
    //jTable1.setUI();
    model = new DefaultTableModel(dataRows, colunms);
    jTable1.setModel(model);
//    System.out.println(Thread.currentThread().getName() + "=" + shared);
}

public void redraw(){
    j1.getXPanel().setPoints(data.countList());
    j1.getXPanel().repaint();
}

public synchronized void updateAmbulance(Ambulance amb){
    for(Ambulance a:data.getAmbulances()){
        if( a.getId().equals(amb.getId()) ){
           a=amb;
        }
    }
}
public synchronized void updatePatient(Patient pat){
    for(Patient p:data.getPatients()){
         if(p.getId()==pat.getId()){
             p = pat;
         }
    }
}
public synchronized void updateStation(Station sta){
    for(Station a:data.getStations()){
        if(a.equals(sta)){
            a.setAct_accommodate(a.getAct_accommodate()+1);
        }
    }
}
public class Worker implements Runnable {

        @Override
        public void run() {
            while (true) {
                
                //check ,if have new patient
                Patient patient = data.getUnassignedPatient();
                if(patient!=null){
                    Ambulance amb = SimulatioinUtil.getclosestAmbulance(
                            data.getUnAssignAmbulances(),
                            patient.getLocalPoint());
                    if(amb!=null){
                        amb.setPatient(patient);
                        patient.setAmbulance(amb);
                        patient.setStatus("Assigned"); 
                        updatePatient(patient);
                        updateAmbulance(amb);
                    }
                    
                }
                for(Ambulance a:data.getAmbulances()){
                    if("Returning".equals(a.getStatus()) && a.getStationPoint()==null){
                        Station station = data.getNearestStation();
                        if(station!=null){
                            a.setStationPoint( station.getLocalPoin());
                            updateStation(station);
                        }else{
                            a.setStationPoint(data.getHospitalPoint());
                        }
                        
                        updateAmbulance(a);
                        break;
                    }
                }
                try {
                    Thread.sleep(3000);
//                    System.out.println(Thread.currentThread().getName() + "=" + shared);
                    refreshTable();
                    redraw();
                    
                } catch (InterruptedException ex) {
                    Logger.getLogger(CanvasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

    }
}
